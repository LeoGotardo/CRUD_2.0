from cryptography.fernet import Fernet
from pymongo import MongoClient
from dotenv import load_dotenv
from hashlib import sha256
from bson import ObjectId
import base64
import random
import string
import os


def createList():
    # Simulando a geração da lista sem o módulo bson, usando string para ObjectId
    lista = []
    base_id = 31
    user = input("Username:")
    user_id = input('User id:')
    user_id = ObjectId(user_id)

    sites = [
    "youtube.com","en.wikipedia.org","facebook.com","instagram.com","twitter.com",
    "whatsapp.com","pornhub.com","pinterest.com","play.google.com","microsoft.com",
    "imdb.com","reddit.com","amazon.com","xnxx.com","apple.com",
    "tiktok.com","es.wikipedia.org","xvideos.com","nytimes.com","globo.com",
    "linkedin.com","de.wikipedia.org","fr.wikipedia.org","ja.wikipedia.org","quora.com",
    "yahoo.co.jp","espncricinfo.com","netflix.com","translate.google.com","uol.com.br",
    "openai.com","spboss.blog","fandom.com","canva.com","ru.wikipedia.org",
    "cricbuzz.com","detik.com","it.wikipedia.org","indiatimes.com","xhamster.com",
    "espn.com","satta-king-fixed-no.in","xosodaiphat.com","mayoclinic.org","sattaamatka.co.com",
    "pt.wikipedia.org","indeed.com","amazon.in","speedtest.net","nih.gov"
]
    
    names = [
    "olivia", "emma", "amelia", "sophia", "charlotte",
    "ava", "isabella", "mia", "luna", "aurora",
    "ellie", "harper", "evelyn", "lily", "aria",
    "mila", "gianna", "eliana", "camila", "nova",
    "sofia", "layla", "violet", "ella", "scarlett",
    "hazel", "willow", "chloe", "ivy", "avery",
    "eleanor", "penelope", "nora", "elena", "abigail",
    "isla", "delilah", "elizabeth", "paisley", "riley",
    "grace", "emily", "zoey", "maya", "leilani",
    "stella", "naomi", "athena", "emilia", "lainey",
    "noah", "liam", "oliver", "mateo", "elijah",
    "lucas", "ezra", "levi", "asher", "leo",
    "james", "luca", "muhammad", "ethan", "henry",
    "hudson", "maverick", "sebastian", "michael", "benjamin",
    "daniel", "jack", "elias", "grayson", "theo",
    "kai", "mason", "alexander", "jackson", "gabriel",
    "theodore", "samuel", "julian", "wyatt", "aiden",
    "josiah", "owen", "david", "waylon", "ezekiel",
    "luke", "jayden", "carter", "william", "isaiah",
    "logan", "santiago", "miles", "matthew", "john"
]


    for i in range(100):
        # Gerar detalhes aleatórios para cada item
        site = random.choice(sites)
        login = random.choice(names)
        login = login+"@gmail.com"
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=20))
        key = keyGenerator(str(user))
        password = encryptSentence(password, key)

        item = {
            "_id": base_id + i,
            "user_id": user_id,
            "logins":{"site": site, "login": login, "password": password}
        }
        
        lista.append(item)

    return lista


def addToDB(list):
    try:
        load_dotenv()

        DB_USER = os.getenv('DB_USER')
        DB_PASSWORD = os.getenv('DB_PASSWORD')

            # MongoDB connection setup
        connection_string = f"mongodb+srv://{DB_USER}:{DB_PASSWORD}@cluster0.gcolnp2.mongodb.net/"

        client = MongoClient(connection_string)
        db = client["Belle"]
        passwords = db["Password"]

        passwords.insert_many(list)
    except Exception as e:
        print(e)


def keyGenerator(secret: str) -> bytes:
    """Generates a secure key from a given secret using SHA-256 hashing and Base64 encoding.

    The function first hashes the secret using SHA-256 to ensure a fixed-length output. Then, it encodes the hash
    in Base64 format to create a suitable key for cryptographic operations, such as Fernet encryption.

    Args:
        secret (str): The secret string from which to generate the key.

    Returns:
        bytes: The generated secure key in Base64 format.
    """
    # Step 1: Hash the string using SHA-256 to ensure 32 bytes
    hash_bytes = sha256(secret.encode('utf-8')).digest()
        
    # Step 2: Encode the hash result in base64 to be used as a Fernet key
    base64_key = base64.urlsafe_b64encode(hash_bytes)
        
    return base64_key
    
    
def encryptSentence(message: str, key: bytes) -> bytes:
    """Encrypts a message using Fernet symmetric encryption with the provided key.

    Args:
        message (str): The plaintext message to encrypt.
        key (bytes): The encryption key in Base64 format, typically generated by the `key_generator` function.

    Returns:
        bytes: The encrypted message.
    """
    cipher = Fernet(key)
    encrypted_message = cipher.encrypt(message.encode('utf-8'))

    return encrypted_message


def main():
    lista = createList()
    addToDB(lista)


if __name__ == "__main__":
    main()
